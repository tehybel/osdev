
Time: 17:20-19:20, 13-17, 11:20-14:50, 12-15, 14:15-17:30, 15:30-16:30,
11-12:15, 11:15-14:00, 10-17, 9:15-TODO,



The goal of this "lab" is the get the OS running on real hardware.
Specifically, I'm using an old Packard Bell netbook called the "dot s":

	http://www.packardbell.com/pb/en/IL/content/model/LU.BUN0D.038



Overview:

- first virtualbox
	- just engineering and settings issues; wrong network card, need LAPIC
	  emulation, different disk setup
- then netbook
- problem: failure to boot
	- tried dd'ing image to a USB drive
	- for historical reasons, many BIOSes will only boot from a USB which
	  "looks right", i.e., has MBR with proper BPB. Testing with and without
	  this block shows that it's indeed necessary. Each vendor tests this in a
	  separate way.
	  	- the historical reason is: there's no specification for telling
		  whether a USB disk is bootable, so some vendors decided yes, some
		  no, and after a while they all tried to autodetect it...
	- after some experimentation, my BIOS uses certain heuristics (0xaa55 in
	  the right place, 1s, 0s in right places)..
	- once I set up the BPB in the MBR correctly, the OS booted!
- problem: bootloader doesn't support USB
	- custom bootloader must fit in 512 bytes (minus MBR/BPB)
	- my bootloader only supports reading the kernel from an ATA drive
		- we need a USB driver, but it won't fit and is complicated
	- workaround: boot a Linux ISO, dd the OS onto the disk
		- we get further, but the netbook just hangs while loading the kernel,
		  and I have no output
- problem: no output
	- we don't have a serial connection
	- can write characters into a buffer at 0xb8000 -> shown as text
	- I used this to figure out where in the code the hang was
		- was painful; have to stay under 512 bytes, and booting Linux each
		  time was slow...
	- finally found out where it was hanging
- problem: SATA is not ATA
	- VirtualBox and QEMU both connect their hard drive via an ATA connection
	- my netbook uses SATA
	- ATA works via inb(0x1f0) and such
	- after reading up on it, it turns out that SATA uses the same protocol,
	  just different i/o ports, so we must find those via PCI
		- but PCI code won't fit in 512 bytes...
	- tried to "cheat"; booted Linux, ran "lspci -v" to find ports
		- now we load the kernel and run its code!
		- finally no longer limited to 512 bytes
- problem: where's the LAPIC?
	- our scheduler need a LAPIC for clock interrupts
		- we don't know its hardware address
	- previously we used the "mpconfig" way to find the LAPIC
		- code for this was given to us
		- searches for "_MP_" in a certain area to find a table
		- this table has info about all the CPUs (hence "MP") and their
		  physical LAPIC addresses
		- unfortunately the "_MP_" table.. just isn't there?
	- took a while to figure out the problem; development with live USB and dd
	  is just too slow to be practical...
- problem: can't boot from USB
	- turns out that a custom bootloader is *not* recommended
	- after some searching: GRUB is meant to solve our problem of booting from
	  various media
	- I swapped out my bootloader with GRUB, which has code for loading the
	  kernel from USB (and SATA disk, and even the network)
	- now the development process is nice!
		- just run "make write-usb" and plug it in
- back to the missing LAPIC
	- the mpconfig way is apparently old and one should instead use ACPI
	  tables
	- ACPI is just yet another specification to figure out
		- RSDP is found by scanning some area for "RSD PTR ", like with "_MP_"
		- RSDP points at RSDT
		- RSDT points at various ACPI tables
		- walk over the tables until we find the "APIC" table
	- now we get interrupts and the scheduler works again!
- problem: page table bug
	- on my netbook, updating a PTE had no effect
	- after quite some time searching/thinking, I figured out that it's
	  necessary to invalidate the TLB entry when you update a PTE
	- QEMU and VirtualBox apparently don't emulate the TLB faithfully, so the
	  bug never surfaced in emulators
	  	- could be used to detect virtualization...
- problem: my custom FS is confused by GRUB
	- the FS assumes that its superblock is at index 1, but GRUB is there now
	- changed the rules so that the first 32 MB of disk are reserved, then
	  GRUB and the kernel go there, we use dd to pad with zeros, and then we
	  put the file system
	- after updating the code and makefile, we can load files again
- at this point, if we disable graphics the kernel actually boots!!
- problem: ATA/SATA code uses hardcoded inports
	- we used "lspci -v" on Linux to "cheat" and get the right ports earlier
	- that's hacky; have to change code when switching from QEMU to netbook
	- went back and wrote PCI code which finds this info dynamically
- problem: graphics don't work
	- the video mode needs to be set
	- old assembly code would switch to real mode, walk over modes, find one
	  that was 1024x768x32, and set it
	- had to rewrite this to be able to retrieve each mode and print it, then
	  choose a proper one and set it
	  	- 16-bit assembly code is not very maintainable...
	- problem was: my netbook only supports 800x600x32
- problem: mouse driver broken
	- turns out that I was forgetting to wait between calls to inb, so that
	  three calls in a row would read the same byte
	  	- again, QEMU and VirtualBox didn't emulate this faithfully
- finally: the OS works in QEMU, VirtualBox, and on my netbook!






-------------------------------------

Unpolished notes:

First we want virtualbox to work.

http://wiki.osdev.org/Disk_Images


We can create a VMDK with:

	VBoxManage internalcommands createrawvmdk -filename /tmp/test.vmdk -rawdisk /home/imm/osdev/obj/kern/kernel.img


I had to make some minor changes to make it work in virtualbox. E.g. we must
detect when there's no e1000 and no secondary disk.

I also had to change some settings on the virtualbox machine. E.g. I had to
enable serial out (writing it to a file). I also had to attach the second
disk containing the file system. I also enabled LAPIC emulation; otherwise no
clock signals are generated and the scheduler is never called.


.............

I tried dd'ing the disk image to a USB drive and putting it into my netbook.
However it refuses to boot from it.

http://wiki.osdev.org/Problems_Booting_From_USB_Flash


This thread has 512 bytes of code with and without BIOS Parameter Block (BPB).

http://f.osdev.org/viewtopic.php?f=1&t=19366

With a BPB, the machine boots from USB. 
Without BPB.. it also works.

That sample code places the bytes "0xaa55" at offset 510. If I change that to
another value, the system refuses to boot.

Apparently that magic value signals that the disk is bootable. More info here:

	https://en.wikipedia.org/wiki/Master_boot_record

So we'll just have to write those bytes in our OS boot.S file.

.....

It turns out that our Makefile already does this for us. So that's not the
problem.


I've noticed that the image that boots, found in the forum topic above, has
lots of 0s in the first sector. If we turn those into 1s, the machine won't
boot anymore. So it seems that there are further requirements on the layout of
the first disk block....

Indeed, it keeps working until we set the 16 bytes at +0x1be to 0x1 instead of
0x0. At that offset is the first partition entry of the MBR, according to the
wiki link above.

There's just one problem: those bytes are already 0 in our kernel image, and
it doesn't boot...

Aha. If we put a proper BPB in the first block, the BIOS cooperates and boots
from the disk. So it's probably using some sort of heuristic to determine
whether it's bootable or not.



Now I got a little further. But I just realized that our boot loader, which
fits into the first 512 bytes, usually loads the kernel from the main disk via
ATA PIO. Now, though, the kernel is on a USB. So we now have to write a USB
driver that'll fit in those 512 bytes.

Alternatively we can boot an arch iso and use it to dd our OS from another USB
to the main hard drive. I'll go with that for now.

...

Okay. My netbook is hanging. I've got no output and no clue what it's doing...

...

Now I've got output working by writing directly into the video memory, as seen
here:

	http://wiki.osdev.org/Printing_To_Screen

So I can start actually solving the problem. The waitdisk() function is
hanging.


Oh. It turns out there are different kinds of hardware controllers. Our OS
assumes that it's on an IDE (aka. ATA) controller. And that was the case in
QEMU and VirtualBox. But what about my netbook?

	http://www.packardbell.com/pb/en/IL/content/model/LU.BUN0D.038

It seems to be SATA. That's *probably* okay.


All in all I now know that the problem lies in reading data from the (S)ATA
hard drive.

.....

All my tests show that we have a "floating bus", i.e., that there are no valid
drives to read from. So what do we do?


Aha. Yesterday I assumed that SATA and ATA were compatible, but I just
tested that. VirtualBox can emulate a SATA interface instead of IDE/ATA.

When I do that, I get exactly the same behavior as on my netbook. The
waitdisk() function is timing out and the bus is floating.


However there's a BIOS setting called "SATA Mode" which I tried switching from
AHCI to IDE. That didn't help, though..


I did some more searching. Here's a useful link:

	http://f.osdev.org/viewtopic.php?f=1&t=24355

It seems that while SATA is backwards compatible with ATA, that's only the
case when using a PCI-based driver. If we use PIO, SATA simply isn't connected
to the ports that ATA is.

So we can keep our driver, but we must add PCI support.


I also just realized that VirtualBox only supports SATA in AHCI mode. So we
can't use that for testing...

......

The purpose of the PCI part of the driver is simply to determine at which
ports to communicate with the ATA interface.

However PCI code simply won't fit in those first 512 bytes. We'd have to add
another stage of loading somehow..

But there's a way to cheat. I booted into a live CD and ran "lspci -v". It
told me this:

	PCI interface: SATA controller (IDE mode)
	IRQ 17
	I/O ports at
		60b8
		60cc
		60b0
		60c8
		60a0
	Memory at 52000000
	Kernel driver in use: ata_piix
	Kernel modules: ata_piix, pata_acpi, ata_generic

Perhaps we can just hardcode those io ports.

Indeed, that works! Now we've got the boot loader running and we get into the
kernel!

However now the initialization process gets stuck at some point.



Well, now there's a new problem: we're loading data not from our USB, but from
the hard drive. So we'll have to go through a live disk to dd the new kernel
onto the disk each time. And that's awfully slow...

That seems like the best option for now, though. Alternatively we could write
a USB driver.

Okay. It's slow and painful but it kind of works.


Next problem: the system either doesn't have a LAPIC, or it's not getting
enabled properly. This means that we're not generating any timer IRQs. So the
scheduler isn't working properly.




The major problem right now is that development is too slow. That's caused by
having to boot into a live CD to dd my kernel image onto the hard drive.

It would be much nicer if we could load the kernel straight from the USB.
Apparently writing a USB driver is time-consuming. But we can instead ask the
BIOS to read from USB for us, according to this thread:

	http://forum.osdev.org/viewtopic.php?f=1&t=26697

Here's info about this:

	http://wiki.osdev.org/ATA_in_x86_RealMode_(BIOS)

But that's also messy -- we need to drop back to real mode, and apparently
there's a size limit for how much can be read from a USB this way, since it's
performing floppy emulation, giving a max size of ~1.4 Mb. That's not enough
for us...



Maybe we just have to live with slow development. That's the major problem on
real hardware.

So back to the missing LAPIC.


Fortunately we can emulate the same issue using virtualbox.

.......

Actually no. What VirtualBox does when I change that setting is to completely
disable the APIC, so that we only have a PIC. But that's surely not the case
for my netbook, since it's less than 20 years old...

So I'll have to figure out in more detail what's happening on my netbook.





...........

Currently I'm getting "no _MP_ signature found"; the problem lies in the
initialization of multiprocessing.

That's a problem because we need that multiprocessing config structure; it
points us to the physical address of the LAPIC, which we need to generate
clock signals. Those are used for context switching.


Actually that's just one of our problems. The other is that I constantly have
to boot into a live CD and copy the OS onto the hard drive... That makes
development extremely slow and tedious. Especially since my netbook is already
slow to boot Linux.



If we can solve the latter problem, the whole process will be far smoother.

A lot of our problems stem from the bootloader. It's custom written, rather
than relying on, say, GRUB to do the work. The current problem is that we only
support a certain type of drive -- we don't support loading the second stage
from USB. So I can't just boot from USB, I have to first move the files onto
the hard drive. And that's slow.


I guess switching to GRUB might make sense. Then the kernel should be able to
run from USB rather than the hard drive.


.....

It turns out that GRUB is meant to solve exactly the problem I was having,
namely that of booting from any device, including CD-ROM, USB, hard drives,
ethernet, etc.

So I changed the kernel to use GRUB rather than our custom bootloader. For us,
the main difference is that GRUB supports loading from USB.

Now development is much nicer. I can just swap a USB stick back and forth.



......

Now we can tackle the next problem: the kernel doesn't find an _MP_ signature.
Therefore we don't know where the LAPIC is. Therefore scheduling is broken.


According to this site:

	http://wiki.osdev.org/Symmetric_Multiprocessing#Finding_information_using_MP_Table

Then using the MP config is a somewhat old method; nowadays one should use
ACPI tables instead. More info here:

	http://wiki.osdev.org/MADT

The MADT is a table which has the info we need. How do we find the MADT? From
the RSDT. How do we find that? From the RSDP. And that can be found in the
EBDA:

	http://wiki.osdev.org/RSDP

Example code:

	https://github.com/pdoane/osdev/blob/master/acpi/acpi.c


........

I had a "fun" bug: I forgot to invalidate the TLB entry after modifying the
page table. This gave no problems in QEMU -- apparently it doesn't emulate the
TLB faithfully. But on real hardware, the old TLB entry was repeatedly used,
so that dereferencing a virtual address always led to the same physical
address, despite me having changed the page tables.



Now SMP initialization works, via the ACPI interface. Great.

Unfortunately the OS is failing to read from the IDE drive now. And I have no
clue why.

Apparently we're getting a "floating bus" error again...



.........

It's the same error as before; the problem was that my netbook uses SATA, not
ATA, and so we must find the IO_BASE via PCI. (We hardcode it for now.)


...............



Now we can boot the OS from USB, with the custom file system residing on the
main hard drive. And that works!

The problem is that I would like to boot the OS without a USB plugged in. So
the hard drive should contain:
- GRUB
- the kernel ELF file, loaded by GRUB
- the custom file system, somewhere on disk where my OS can find it

So we need to figure out how to make GRUB's ISO creation process put the
custom file system somewhere static.

Some relevant info:

	http://wiki.osdev.org/I_use_a_Custom_Filesystem_-_What_Bootloader_Solution_is_right_for_me%3F



We need to modify our custom file system such that we e.g. reserve the first
10 MB of the disk for GRUB and the OS image, and at offset 10 MB we have the
file system itself.

We might want to do the following: we split the disk into three partitions.
Partition 0 is 10 MB and contains GRUB. Partition 1 is 10 MB and contains the
OS; grub will load it for us. Partition 2 contains the raw file system, which
is only managed by our OS, never by GRUB.

Actually GRUB doesn't need to know any of this. We can use dd to have a single
raw image which is a valid ELF file, padded up to 10 MB, and which then
contains the file system. Then the OS just needs to know where the FS starts.


The next step is therefore to make a raw disk image which contains all of
those things.

........

It works now! I made the rule for our custom FS that the first 32 MB are
reserved. Then GRUB's ISO goes there, and it contains the ELF file that is our
kernel.


........

I changed the IDE code to first use PCI to find the io_base.

.........

Next, the goal is to get graphics working on the netbook. I'm getting "failed
to set video mode", though. So next we need to figure out why.

.........

The problem was that 1024x768 wasn't supported. I had to rewrite the assembly
which gets and sets the video mode -- before it would search for a specific
width and height, but now it can instead enumerate all the modes and we can
dynamically select an appropriate one.

The real issue here was that I'd taken shortcuts earlier, making the OS only
support a single video mode (which worked in QEMU).

........

Now it works on my netbook -- I can actually see graphics! The main problem at
the moment is that the mouse driver seems.. broken.. the mouse is going all
over the place when I move it.

...

The bug was that I forgot to call wait_before_reading_from_mouse() before
using the inb instruction. Apparently hardware *does* need some cycles in
between inb's, but QEMU doesn't. So this bug wasn't apparent on QEMU.


Now it seems that everything finally works! Then it just needs some
polishing...



I still have no clue why it doesn't work in VirtualBox -- my ACPI code isn't
finding the right tables, and when I look in memory what's there just seems
completely wrong. I'll return to that later....

.....

Oh. I forgot that VirtualBox never worked with my ACPI code -- but it didn't
need to, because it worked with mpconfig instead. So there's no problem after
all.

The OS now runs in QEMU, VirtualBox and my netbook!


.....



